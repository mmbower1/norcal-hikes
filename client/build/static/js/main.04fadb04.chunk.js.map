{"version":3,"sources":["img/logo-white.png","actions/types.js","components/button/Button.js","img/green-spinner.gif","components/footer/Footer.js","components/header/Header.js","components/navigation/Navigation.js","components/spinner/Spinner.js","reducers/subscription.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NEW_SUBSCRIPTION","ERROR_SUBSCRIPTION","Button","className","Footer","src","footerLogo","alt","href","Header","useState","logoWhite","Navigation","type","id","htmlFor","Spinner","spinner","style","width","margin","display","initialState","loading","subscribed","rootReducer","combineReducers","subscribe","state","action","payload","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","persistStore","Features","lazy","Hikes","Main","Subscription","App","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.04fadb04.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-white.40d4ef82.png\";","export const NEW_SUBSCRIPTION = 'NEW_SUBSCRIPTION';\nexport const ERROR_SUBSCRIPTION = 'ERROR_SUBSCRIPTION';\n\n","import React from 'react';\n// styles\nimport './Button.scss';\n\nconst Button = () => {\n\n  return (\n    <div className=\"btn btn-white btn-animated\">\n      Discover Outdoors\n    </div>\n  )\n}\n\nexport default Button;\n","module.exports = __webpack_public_path__ + \"static/media/green-spinner.3551210e.gif\";","import React from 'react';\nimport footerLogo from '../../img/logo-white.png';\n// styles\nimport './Footer.scss';\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      <div className=\"footer__logo-box\">\n        <img src={footerLogo} alt=\"Full logo\" className=\"footer__logo\" />\n      </div>\n      <div className=\"row\">\n        <div className=\"col-1-of-2\">\n          <div className=\"footer__navigation\">\n            <ul className=\"footer__list\">\n              <li className=\"footer__item\">\n                <a href=\"\" className=\"footer__link\">Company</a>\n                <a href=\"\" className=\"footer__link\">Contact</a>\n                <a href=\"\" className=\"footer__link\">Careers</a>\n                <a href=\"\" className=\"footer__link\">Privacy policy</a>\n                <a href=\"\" className=\"footer__link\">Terms</a>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"col-1-of-2\">\n          <p className=\"footer__copyright\">\n            Copyright &copy; 2020 https://norcal-hikes.com/\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Footer;\n","import React, {useState} from 'react';\n// components\nimport Button from '../button/Button';\n// scss\nimport './Header.scss';\nimport logoWhite from '../../img/logo-white.png';\n\nconst Header = () => {\n  const [discover, setDiscover] = useState('Discover outdoors');\n\n  return (\n    <div className=\"header\">\n      <div className=\"logo-box\">\n        <img src={logoWhite} alt=\"logo\" className=\"logo\" />\n      </div>\n      <div className=\"text-box\">\n        <h1 className=\"heading-primary\">\n          <span className=\"heading-primary-main\">Northern California</span>\n          <span className=\"heading-primary-sub\">is where life happens</span>\n        </h1>\n        <Button></Button>\n        {/* <Button />Discover Outdoors */}\n        {/* <h4>{discover}</h4> */}\n      </div>\n    </div>\n  )\n}\n\nexport default Header;\n","import React from 'react';\nimport './Navigation.scss';\n\nconst Navigation = () => {\n  return (\n    <div className=\"navigation\">\n      <input type=\"checkbox\" className=\"navigation__checkbox\" id=\"navi-toggle\" />\n      <label htmlFor=\"navi-toggle\" className=\"navigation__button\">\n        <span className=\"navigation__icon\">&nbsp;</span>\n      </label>\n      <div className=\"navigation__background\">&nbsp;</div>\n      <nav className=\"navigation__nav\">\n        <ul className=\"navigation__list\">\n          <li className=\"navigation__item\">\n            <a href=\"\" className=\"navigation__link\">\n              About\n            </a>\n          </li>\n          <li className=\"navigation__item\">\n            <a href=\"\" className=\"navigation__link\">\n              Benefits\n            </a>\n          </li>\n          <li className=\"navigation__item\">\n            <a href=\"\" className=\"navigation__link\">\n              Popular hikes\n            </a>\n          </li>\n          <li className=\"navigation__item\">\n            <a href=\"\" className=\"navigation__link\">\n              Subscribe\n            </a>\n          </li>\n          <li className=\"navigation__item\">\n            <a href=\"\" className=\"navigation__link\">\n              Contact\n            </a>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  )\n}\n\nexport default Navigation;","import React, { Fragment } from 'react';\nimport spinner from '../../img/green-spinner.gif';\n// import { SpinnerContainer, SpinnerOverlay } from './Spinner.styles.js';\n\n// const Spinner = WrappedComponent => {\n//   const WithSpinner = ({ loading, ...props }) => {\n//     return loading ? (\n//       <SpinnerOverlay>\n//         <SpinnerContainer />\n//       </SpinnerOverlay>\n//     ) : (\n//       <WrappedComponent {...props} />\n//     ) \n//   }\n//   return WithSpinner\n// }\n\nconst Spinner = () => {\n  return (\n    <Fragment>\n      <img\n          src={spinner}\n          style={{ width: '200px', margin: 'auto', display: 'block' }}\n          alt='Loading...'\n      />\n    </Fragment>\n  )\n}\n\nexport default Spinner;","import {\n  NEW_SUBSCRIPTION,\n  ERROR_SUBSCRIPTION\n} from '../actions/types';\n\nconst initialState = {\n  // token: localStorage.getItem('token'),\n  // isAuthenticated: null,\n  loading: true,\n  subscribed: false\n}\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch(type) {\n    case NEW_SUBSCRIPTION:\n    // case UPDATE_ACCOUNT:\n      return {\n        ...state,\n        loading: false,\n        subscribed: true\n      }\n    case ERROR_SUBSCRIPTION:\n      return {\n        ...state,\n        loading: false,\n        subscribed: false\n      }\n\n      default:\n        return state\n  }\n}","import { combineReducers } from 'redux';\n// redux persist for localStorage\n// import { persistReducer } from 'redux-persist';\n// import storage from 'redux-persist/lib/storage';\n// reducers\nimport subscribe from './subscription';\n// import profile from './profile';\n\n// const persistConfig = {\n//   key: 'root',\n//   storage,\n//   whitelist: ['cart']\n// }\n\nconst rootReducer = combineReducers({\n  subscribe\n  // profile\n});\n\n// export default persistReducer(persistConfig, rootReducer);\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport { persistStore } from 'redux-persist';\n// import { createSagaMiddleware } from 'redux-saga';\n\n// const sagaMiddleware = createSagaMiddleware();\n\nconst initialState = {};\nconst middleware = [thunk]; // sagaMiddleware replaces thunk here if using sagas\n\nexport const store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport const persistor = persistStore(store);\n\n// export default { store };\n// export default { persistor };","import React, { lazy, Suspense } from 'react';\n\n// components\nimport Footer from './components/footer/Footer';\nimport Header from './components/header/Header';\nimport Navigation from './components/navigation/Navigation';\nimport Spinner from './components/spinner/Spinner';\n// containers\n// import Features from './containers/features/Features';\n// import Hikes from './containers/hikes/Hikes'; \n// import Main from './containers/main/Main';\n// import Subscription from './containers/subscription/Subscription';\n// redux\nimport { store, \n  // persistor \n} from './store';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react'; // localstorage\n// scss\nimport './scss/App.scss';\n\n// react lazy - replaces the imported containers from above\nconst Features = lazy(() => import('./containers/features/Features'));\nconst Hikes = lazy(() => import('./containers/hikes/Hikes'));\nconst Main = lazy(() => import('./containers/main/Main'));\nconst Subscription = lazy(() => import('./containers/subscription/Subscription'));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Suspense fallback={<Spinner />}>\n          <Navigation />\n          <Header />\n          <Main />\n          <Features />\n          <Hikes />\n          <Subscription />\n          <Footer />\n        </Suspense>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}